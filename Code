// SPDX-License-Identifier: MIT
pragma solidity ^0.8.10;

contract SmartEscrow {
    enum Status { Initialized, Locked, Completed, Refunded, InDispute }

    struct Deal {
        address client;
        address provider;
        uint256 value;
        Status phase;
    }

    address public supervisor;
    uint256 public dealCount;
    mapping(uint256 => Deal) private deals;

    event NewDeal(uint256 indexed id, address indexed client, address indexed provider, uint256 value);
    event DealLocked(uint256 indexed id);
    event DealCompleted(uint256 indexed id);
    event DealRefunded(uint256 indexed id);
    event DealDisputed(uint256 indexed id);
    event DisputeResolved(uint256 indexed id, bool favorProvider);

    modifier onlySupervisor() {
        require(msg.sender == supervisor, "Unauthorized");
        _;
    }

    modifier atPhase(uint256 id, Status expected) {
        require(deals[id].phase == expected, "Invalid status");
        _;
    }

    constructor() {
        supervisor = msg.sender;
    }

    function initiateDeal(address client, address provider) external payable onlySupervisor {
        uint256 id = dealCount++;
        deals[id] = Deal(client, provider, msg.value, Status.Initialized);
        emit NewDeal(id, client, provider, msg.value);
    }

    function lockDeal(uint256 id) external onlySupervisor atPhase(id, Status.Initialized) {
        deals[id].phase = Status.Locked;
        emit DealLocked(id);
    }

    function completeDeal(uint256 id) external onlySupervisor atPhase(id, Status.Locked) {
        deals[id].phase = Status.Completed;
        payable(deals[id].provider).transfer(deals[id].value);
        emit DealCompleted(id);
    }

    function refundDeal(uint256 id) external onlySupervisor atPhase(id, Status.Locked) {
        deals[id].phase = Status.Refunded;
        payable(deals[id].client).transfer(deals[id].value);
        emit DealRefunded(id);
    }

    function disputeDeal(uint256 id) external onlySupervisor atPhase(id, Status.Locked) {
        deals[id].phase = Status.InDispute;
        emit DealDisputed(id);
    }

    function resolveDispute(uint256 id, bool payProvider) external onlySupervisor atPhase(id, Status.InDispute) {
        deals[id].phase = Status.Completed;
        address payable recipient = payProvider ? payable(deals[id].provider) : payable(deals[id].client);
        recipient.transfer(deals[id].value);
        emit DisputeResolved(id, payProvider);
    }

    function checkStatus(uint256 id) external view returns (Status) {
        return deals[id].phase;
    }
}
